d$GEOID10 <- as.factor(d$GEOID10)
d %>%
left_join(hoodsTracts,d,by='GEOID10') %>%
group_by(mapname) %>%
summarise(pop = sum(B17001_001E, na.rm = TRUE),
pov = sum(B17001_002E, na.rm = TRUE),
hhs = sum(B25003_001E, na.rm = TRUE),
hom = sum(B25003_002E, na.rm=TRUE))
}
test <- census_pull(year=2016
,vars = 'B17001_001E,B17001_002E,B25003_001E,B25003_002E'
,stateFICS = 42
,county = 101)
View(test)
View(d)
census_pull <- function(year,vars,stateFICS,county) {
final_url <- paste0("https://api.census.gov/data/",year,"/acs/acs5?get=",vars
,"&for=tract:*&in=state:",stateFICS,"&in=county:",county,"&key=",censusKey)
dat <- fromJSON(file = final_url)
d = ldply(dat)
colnames(d) <- d[1, ] # the first row will be the header
d = d[-1, ]          # removing the first row.
d <- unite(d,"GEOID10", c("state","county","tract"),sep="",remove=TRUE)
colNames <- colnames(d)
d[,colNames]<-lapply(d[,colNames],as.numeric)
d$GEOID10 <- as.factor(d$GEOID10)
d %>%
left_join(hoodsTracts,d,by='GEOID10')
}
test <- census_pull(year=2016
,vars = 'B17001_001E,B17001_002E,B25003_001E,B25003_002E'
,stateFICS = 42
,county = 101)
View(test)
combo3 <- ddply(test, c("mapname"), summarise,
pop = sum(B17001_001E, na.rm = TRUE),
pov = sum(B17001_002E, na.rm = TRUE),
hhs = sum(B25003_001E, na.rm = TRUE),
hom = sum(B25003_002E,na.rm=TRUE))
View(combo3)
combo3$povPct <- ifelse(combo3$pop != 0, as.numeric(round((combo3$pov / combo3$pop) * 100,1)), NA)
combo3$homPct <- ifelse(combo3$hhs != 0, as.numeric(round((combo3$hom / combo3$hhs) * 100,1)), NA)
polyData <- left_join(x=hoods,y=combo3,by="mapname")
polyData <- subset(polyData,select = -c(cartodb_id,created_at,updated_at,name,listname))
school_pull('PA','Philadelphia','High Schools')
school_pull <- function(stateAbbrev,city,level) {
schoolURL <- paste0("https://api.greatschools.org/search/schools?key=",
greatSchoolsKey,"&state=",stateAbbrev,"&q=",city,"&sort=alpha&levelCode="
,level)
schoolDat <- fromJSON(file = schoolURL)
}
school_pull('PA','Philadelphia','High Schools')
greatSchoolsKey <- "4c6cbbb25c5ad456271f0b1e1b8fe9d4"
school_pull <- function(stateAbbrev,city,level) {
schoolURL <- paste0("https://api.greatschools.org/search/schools?key=",
greatSchoolsKey,"&state=",stateAbbrev,"&q=",city,"&sort=alpha&levelCode="
,level)
schoolDat <- fromJSON(file = schoolURL)
}
school_pull('PA','Philadelphia','High Schools')
school_pull <- function(stateAbbrev,city,level) {
schoolURL <- paste0("https://api.greatschools.org/search/schools?key=",
greatSchoolsKey,"&state=",stateAbbrev,"&q=",city,"&sort=alpha&levelCode="
,level,"-schools")
schoolDat <- fromJSON(file = schoolURL)
}
school_pull('PA','Philadelphia','High')
school_pull <- function(stateAbbrev) {
schoolURL <- paste0("https://api.greatschools.org/school/tests/"
,stateAbbrev,"?key=",greatSchoolsKey
)
schoolDat <- fromJSON(file = schoolURL)
}
school_pull('PA')
schoolURL <- paste0("https://api.greatschools.org/school/tests/"
,stateAbbrev,"/?key=",greatSchoolsKey
)
school_pull <- function(stateAbbrev) {
schoolURL <- paste0("https://api.greatschools.org/school/tests/"
,stateAbbrev,"/?key=",greatSchoolsKey
)
schoolDat <- fromJSON(file = schoolURL)
}
school_pull('PA')
school_pull <- function(stateAbbrev,city) {
schoolURL <- paste0("https://api.greatschools.org/schools/"
,stateAbbrev,"/",city,"?key=",greatSchoolsKey)
schoolDat <- fromJSON(file = schoolURL)
}
school_pull('PA','Philadelphia')
school_pull <- function(stateAbbrev,city) {
schoolURL <- paste0("https://api.greatschools.org/schools/"
,stateAbbrev,"/",city,"?key=",greatSchoolsKey)
fromJSON(file = schoolURL)
}
school_pull('PA','Philadelphia')
install.packages('xml2')
install.packages('xmltools')
devtools::install_github('dantonnoriega/xmltools')
install.packages(c("acs", "arm", "backports", "BH", "bindr", "bindrcpp", "broom", "car", "carData", "caret", "censusapi", "checkmate", "coin", "CORElearn", "corrplot", "curl", "data.table", "DBI", "ddalpha", "devtools", "digest", "dplyr", "DRR", "DT", "effects", "forcats", "foreach", "foreign", "Formula", "geojsonio", "geosphere", "ggeffects", "ggthemes", "git2r", "glmmTMB", "glue", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmlwidgets", "httpuv", "iterators", "kernlab", "knitr", "lava", "lazyeval", "leaflet", "lme4", "lmtest", "lubridate", "mapproj", "maps", "mlogit", "multcomp", "mvtnorm", "openssl", "pastecs", "pdftools", "plogr", "popbio", "prediction", "pROC", "prodlim", "pscl", "psych", "purrr", "pwr", "quantreg", "randomForest", "raster", "Rcpp", "RcppEigen", "RCurl", "readxl", "recipes", "reshape2", "rgdal", "rgeos", "rJava", "rjson", "rlang", "rmarkdown", "robustbase", "rprojroot", "RSocrata", "selectr", "sf", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "sourcetools", "sp", "stargazer", "stringdist", "stringi", "stringr", "survey", "survival", "testthat", "tibble", "tidycensus", "tidyr", "tidyselect", "tidyverse", "tigris", "timeDate", "tm", "TMB", "units", "vcd", "viridis", "viridisLite", "withr", "XML", "yaml", "zoo"))
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
library(xmltools)
devtools::install_github('dantonnoriega/xmltools')
devtools::install_github('dantonnoriega/xmltools')
library(sf)
library(plyr)
install.packages('sf','plyr','dplyr','rjson','tidyr','sp','rgdal','geojsonio'
,'devtools')
cancel
install.packages('sf')
install.packages('sf')
library(sf)
library(sf)
update.packages()
version
packageStatus()
library(sf)
library(plyr)
library(dplyr)
library(rjson)
library(tidyr)
install.packages('sf')
library(sf)
install.packages('devtools')
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'Tw33tys!')
library(sf)
install.packages(sf)
install.packages('sf')
library(plyr)
library(dplyr)
library(rjson)
library(tidyr)
library(sp)
library(rgdal)
library(geojsonio)
devtools::install_github('dantonnoriega/xmltools')
library(xmltools)
censusKey <- "4d92e5c53d5b7046bae0b72874aceed0fde3e0b4"
greatSchoolsKey <- "4c6cbbb25c5ad456271f0b1e1b8fe9d4"
hoods <- st_read("https://raw.githubusercontent.com/alisanroman/philly-hoods/master/data/Neighborhoods_Philadelphia.geojson")
library(sf)
install.packages("sf")
library(rgdal)
library(sf)
library(rgdal)
install.packages('rgdal')
library(rgdal)
library(sf)
library(plyr)
library(dplyr)
library(rjson)
install.packages('rjson')
library(rjson)
library(tidyr)
library(sp)
library(geojsonio)
install.packages('geojsonio')
install.packages("rgdal", repos = "http://cran.us.r-project.org", type = "source")
install.packages("rgdal", repos = "http://cran.us.r-project.org", type = "source")
library(rgdal)
update.packages('rgdal')
library(rgdal)
library(plyr)
library(dplyr)
library(rjson)
library(tidyr)
library(sp)
library(geojsonio)
library(sf)
install.packages('sf')
library(sp)
library(rgdal)
library(plyr)
library(dplyr)
library(rjson)
library(tidyr)
library(devtools)
library(sf)
library(geojsonio)
library(xmltools)
censusKey <- "4d92e5c53d5b7046bae0b72874aceed0fde3e0b4"
greatSchoolsKey <- "4c6cbbb25c5ad456271f0b1e1b8fe9d4"
hoods <- st_read("https://raw.githubusercontent.com/alisanroman/philly-hoods/master/data/Neighborhoods_Philadelphia.geojson")
tracts <- st_read("https://raw.githubusercontent.com/alisanroman/qapScoring/master/data/Census_Tracts_2010.geojson")
cent<-  st_centroid(tracts)
hoodsTracts <- st_join(hoods, cent)
hoodsTracts$mapname <- as.character(hoodsTracts$mapname)
ds_hoodsTracts <- data.frame(hoodsTracts) %>%
select("mapname","TRACTCE10","GEOID10")
census_pull <- function(year,vars,stateFICS,county) {
final_url <- paste0("https://api.census.gov/data/",year,"/acs/acs5?get=",vars
,"&for=tract:*&in=state:",stateFICS,"&in=county:",county,"&key=",censusKey)
dat <- fromJSON(file = final_url)
d = ldply(dat)
colnames(d) <- d[1, ] # the first row will be the header
d = d[-1, ]          # removing the first row.
d <- unite(d,"GEOID10", c("state","county","tract"),sep="",remove=TRUE)
colNames <- colnames(d)
d[,colNames]<-lapply(d[,colNames],as.numeric)
d$GEOID10 <- as.factor(d$GEOID10)
d %>%
left_join(hoodsTracts,d,by='GEOID10')
}
test <- census_pull(year=2016
,vars = 'B17001_001E,B17001_002E,B25003_001E,B25003_002E'
,stateFICS = 42
,county = 101)
school_pull <- function(stateAbbrev,city) {
schoolURL <- paste0("https://api.greatschools.org/schools/"
,stateAbbrev,"/",city,"?key=",greatSchoolsKey)
fromJSON(file = schoolURL)
}
school_pull('PA','Philadelphia')
file <- system.file("extdata", schoolURL, package = "xmltools")
schoolURL <- paste0("https://api.greatschools.org/schools/"
,stateAbbrev,"/",city,"?key=",greatSchoolsKey)
stateAbbrev = 'PA'
city='Philadelphia'
schoolURL <- paste0("https://api.greatschools.org/schools/"
,stateAbbrev,"/",city,"?key=",greatSchoolsKey)
file <- system.file("extdata", schoolURL, package = "xmltools")
install.packages('XML')
library(XML)
file <- xmlParse(schoolURL)
schoolURL <- paste0("https://api.greatschools.org/schools/"
,stateAbbrev,"/",city,"?key=",greatSchoolsKey,'.xml')
file <- xmlParse(schoolURL)
library(xml2)
?getURL
install.packages('RCurl')
library(RCurl)
xmlFile <- getURL(schoolURL)
schoolURL <- paste0("https://api.greatschools.org/schools/"
,stateAbbrev,"/",city,"?key=",greatSchoolsKey)
xmlFile <- getURL(schoolURL)
xmlContent <- xmlParse(xmlFile)
xmlroot <- xmlRoot(xmlContent)
final_xml <- xmlToDataFrame(xmlroot)
datatable(final_xml)
library(DT)
install.packages('DT')
library(DT)
datatable(final_xml)
schoolURL <- paste0("https://api.greatschools.org/search/schools?key="
,greatSchoolsKey,"&state=",stateAbbrev,"&q=",city
,"&sort=alpha&levelCode=high-schools")
xmlFile <- getURL(schoolURL)
xmlContent <- xmlParse(xmlFile)
xmlroot <- xmlRoot(xmlContent)
final_xml <- xmlToDataFrame(xmlroot)
datatable(final_xml)
schoolURL
schoolURL <- paste0("https://api.greatschools.org/search/schools?key="
,greatSchoolsKey,"&state=",stateAbbrev,"&city=",city
,"&sort=alpha&levelCode=high-schools")
xmlFile <- getURL(schoolURL)
schoolURL3 <- paste0("https://api.greatschools.org/schools/"
,stateAbbrev,"/",city,"/public/high-schools"
,"?key=",greatSchoolsKey,"&sort=gs_rating&limit=-1" )
xmlFile <- getURL(schoolURL)
schoolURL3
xmlFile <- getURL(schoolURL)
xmlContent <- xmlParse(xmlFile)
xmlroot <- xmlRoot(xmlContent)
final_xml <- xmlToDataFrame(xmlroot)
datatable(final_xml)
schoolURL3 <- paste0("https://api.greatschools.org/schools/"
,stateAbbrev,"/",city,"/public/high-schools"
,"?key=",greatSchoolsKey,"&sort=gs_rating&limit=-1" )
xmlFile <- getURL(schoolURL)
xmlFile <- getURL(schoolURL3)
xmlContent <- xmlParse(xmlFile)
xmlroot <- xmlRoot(xmlContent)
final_xml <- xmlToDataFrame(xmlroot)
datatable(final_xml)
schoolURL3 <- paste0("https://api.greatschools.org/schools/",stateAbbrev,"/",city,"/high-schools","?key=",greatSchoolsKey,"&sort=gs_rating&limit=-1" )
xmlFile <- getURL(schoolURL3)
xmlContent <- xmlParse(xmlFile)
xmlroot <- xmlRoot(xmlContent)
final_xml <- xmlToDataFrame(xmlroot)
datatable(final_xml)
schoolURL3
schoolURL3 <- paste0("https://api.greatschools.org/schools/",stateAbbrev,"/",city,"/charter/high-schools","?key=",greatSchoolsKey,"&sort=gs_rating&limit=-1" )
xmlFile <- getURL(schoolURL3)
xmlContent <- xmlParse(xmlFile)
xmlroot <- xmlRoot(xmlContent)
final_xml <- xmlToDataFrame(xmlroot)
datatable(final_xml)
test <- datatable(final_xml)
schoolURL_charter <- paste0("https://api.greatschools.org/schools/",stateAbbrev,"/",city,"/charter/high-schools","?key=",greatSchoolsKey,"&sort=gs_rating&limit=-1" )
schoolURL_public <- paste0("https://api.greatschools.org/schools/",stateAbbrev,"/",city,"/public/high-schools","?key=",greatSchoolsKey,"&sort=gs_rating&limit=-1" )
View(final_xml)
charterData <- xmlToDataFrame(xmlroot)
View(charterData)
xmlFile <- getURL(schoolURL_public)
xmlContent <- xmlParse(xmlFile)
xmlroot <- xmlRoot(xmlContent)
publicData <- xmlToDataFrame(xmlroot)
View(publicData)
View(hoodsTracts)
View(cent)
colnames(charterData)
my.sf.point <- st_as_sf(x = charterData,
coords = c("lon", "lat"),
crs = "+proj=longlat +datum=WGS84")
plot(my.sf.point)
my.sp.point <- as(my.sf.point, "Spatial")
charterData$lat <- as.numeric(charterData$lat)
charterData$lon <- as.numeric(charterData$lon)
my.sf.point <- st_as_sf(x = charterData,
coords = c("lon", "lat"),
crs = "+proj=longlat +datum=WGS84")
plot(my.sf.point)
my.sp.point <- as(my.sf.point, "Spatial")
require(mapview)
install.packages('mapview')
library(mapview)
require(mapview)
mapview(my.sf.point)
publicData$lat <- as.numeric(publicDat$lat)
publicData$lat <- as.numeric(publicData$lat)
publicData$lon  <- as.numeric(publicData$lon)
charterPoint <- st_as_sf(x = charterData, coords = c("lon", "lat"), crs = "+proj=longlat +datum=WGS84")
publicPoint  <- st_as_sf(x = publicData,  coords = c("lon", "lat"), crs = "+proj=longlat +datum=WGS84")
charterPoint <- as(charterPoint, "Spatial")
publicPoint  <- as(publicPoint, "Spatial")
mapview(charterPoint)
mapview(publicPoint)
schoolData <- rbind(publicData,charterData)
schoolData$lat <- as.numeric(schoolData$lat)
schoolData$lon <- as.numeric(schoolData$lon)
schoolPoint <- st_as_sf(x = schoolData, coords = c("lon", "lat"), crs = "+proj=longlat +datum=WGS84")
schoolPoint  <- as(schoolPoint, "Spatial")
mapview(schoolPoint)
wd()
getwd()
setgetwd()
setwd()
setwd('/Users/amsr/Documents/GitHub/qapScoring-Final/data')
geojson_write(input=schoolPoint,file="schoolPoints.geojson")
View(schoolData)
test <- read.delim('SPP.SY20162017/SPP.FF.2016.2917.txt', header = TRUE, sep = "\t", dec = ".")
test <- read.delim('~/SPP.SY20162017/SPP.FF.2016.2917.txt', header = TRUE, sep = "\t", dec = ".")
test <- read.delim('~/SPP.SY20162017.Data/SPP.FF.2016.2917.txt', header = TRUE, sep = "\t", dec = ".")
test <- read.delim("~/Documents/GitHub/qapScoring-Final/data/SPP.SY20162017.Data/SPP.APD.2016.2017.txt", header = TRUE, sep = "\t", dec = ".")
View(test)
test <- read.delim("SPP.APD.2016.2017.txt")
test <- read.delim("SPP.APD.2016.2017.txt")
View(test)
test <- read.delim("SPP.APD.2016.2017.txt",sep="|")
View(test)
schoolDataPA <- read.delim("SPP.APD.2016.2017.txt",sep="|")
colnames(schoolDataPA)
unique(schoolDataPA$LEA.Name)
View(schoolDataPA)
schoolDataPA <- read.delim("SPP.FF.2016.2017.txt",sep="|")
View(schoolDataPA)
schoolDataPA <- read.delim("SPP.APD.2016.2017.txt",sep="|")
schoolDataPA <- read.delim("SPP.FF.2016.2017.txt",sep="|")
View(schoolDataPA)
schoolDataPA <- read.delim("SPP.APD.2016.2017.txt",sep="|")
colnames(schoolDataPA)
unique(schoolDataPA$Data.Element)
schoolDataPA %>%
filter(Data.Element = 'Calculated Score')
schoolDataPA %>%
filter(Data.Element == 'Calculated Score')
schoolDataPA %>%
filter(Data.Element == 'Calculated Score')
schoolDataPA1 <- subset(schoolDataPA, Data.Element == 'Calculated Score')
View(schoolDataPA1)
unique(schoolData$district)
relevantSD <- unique(schoolData$district)
relevantSD
relevantSD <- as.data.frame(unique(schoolData$district))
View(relevantSD)
colnames(schoolDataPA)
schoolDataPA1 <- subset(schoolDataPA, Data.Element == 'Calculated Score'
& LEA.Name %in% unique(schoolDataPA$Data.Element))
schoolDataPA1 <- subset(schoolDataPA, Data.Element == 'Calculated Score'
& LEA.Name %in% unique(schoolData$district))
& tolower(as.character(LEA.Name)) %in% tolower(unique(schoolData$district))
schoolDataPA1 <- subset(schoolDataPA, Data.Element == 'Calculated Score'
& tolower(as.character(LEA.Name)) %in% tolower(unique(schoolData$district))
relevantSD <- as.data.frame()
## combine spatial & census data
combo3 <- ddply(test, c("mapname"), summarise,
pop = sum(B17001_001E, na.rm = TRUE),
pov = sum(B17001_002E, na.rm = TRUE),
hhs = sum(B25003_001E, na.rm = TRUE),
hom = sum(B25003_002E,na.rm=TRUE))
combo3$povPct <- ifelse(combo3$pop != 0, as.numeric(round((combo3$pov / combo3$pop) * 100,1)), NA)
combo3$homPct <- ifelse(combo3$hhs != 0, as.numeric(round((combo3$hom / combo3$hhs) * 100,1)), NA)
polyData <- left_join(x=hoods,y=combo3,by="mapname")
polyData <- subset(polyData,select = -c(cartodb_id,created_at,updated_at,name,listname))
polyData$lowPov <-  ifelse(polyData$povPct < 25.9,1,0)
polyData$affordOptions <- ()
polyData$affordProduction <- ()
polydata$ownerOcc <- ifelse(polyData$homPct >= 52.4, 1,0)
polydata$hsScores <- ifelse()
# Create category var for final slide
polyData$categ <- ifelse(polyData$povPct < 25.9 & polyData$homPct >= 52.4, "Low poverty, high homeownership",
ifelse(polyData$povPct < 25.9 & polyData$homPct < 52.4, "Low poverty, low homeownership",
ifelse(polyData$povPct >= 25.9 & polyData$homPct < 52.4, "High poverty, low homeownership",
ifelse(polyData$povPct >= 25.9 & polyData$homPct >= 52.4
, "High poverty, high homeownership",""))))
unique(polyData$categ)
plot(polyData)
schoolDataPA1 <- subset(schoolDataPA, Data.Element == 'Calculated Score'
& tolower(as.character(LEA.Name)) %in% tolower(unique(schoolData$district)))
View(schoolDataPA1)
schoolDataPA1 <- subset(schoolDataPA, Data.Element == 'Calculated Score'
& (tolower(as.character(LEA.Name)) %in%
tolower(unique(schoolData$district)))
| grepl(tolower(as.character(LEA.Name)),'phila') )
schoolDataPA1 <- subset(schoolDataPA, Data.Element == 'Calculated Score'
& (tolower(as.character(LEA.Name)) %in%
tolower(unique(schoolData$district)))
| grepl('phila',tolower(as.character(LEA.Name))) )
schoolDataPA1 <- subset(schoolDataPA, Data.Element == 'Calculated Score'
& (tolower(as.character(LEA.Name)) %in%
tolower(unique(schoolData$district))
| grepl('phila',tolower(as.character(LEA.Name)))) )
schoolDataPA1 <- subset(schoolDataPA, Data.Element == 'Calculated Score'
& (tolower(as.character(LEA.Name)) %in%
c(tolower(unique(schoolData$district),'Esperanza Academy Charter School'))
| grepl('phila',tolower(as.character(LEA.Name)))) )
schoolDataPA1 <- subset(schoolDataPA, Data.Element == 'Calculated Score'
& (tolower(as.character(LEA.Name)) %in%
tolower(c(unique(schoolData$district),'Esperanza Academy Charter School'))
| grepl('phila',tolower(as.character(LEA.Name)))) )
schoolDataPA1 <- subset(schoolDataPA, Data.Element == 'Calculated Score'
& (tolower(as.character(LEA.Name)) %in%
tolower(c(unique(schoolData$district),'Esperanza Academy Charter School'
,"Mastery CS - Hardy Williams"
,"HOPE for Hyndman CS"
,"MaST Community CS II"
,"Frederick Douglass Mastery Charter School"))
| grepl('phila',tolower(as.character(LEA.Name)))) )
schoolDataPA1 <- subset(schoolDataPA, Data.Element == 'Calculated Score'
& (tolower(as.character(LEA.Name)) %in%
tolower(c(unique(schoolData$district),'Esperanza Academy Charter School'
,"Mastery CS - Hardy Williams"
,"HOPE for Hyndman CS"
,"MaST Community CS II"
,"Frederick Douglass Mastery Charter School"
,"Multicultural Academy CS"))
| grepl('phila',tolower(as.character(LEA.Name)))) )
schoolDataPA1$Display.Value <- as.numeric(schoolDataPA1$Display.Value)
schoolDataPA1 <- subset(schoolDataPA, Data.Element == 'Calculated Score'
& (tolower(as.character(LEA.Name)) %in%
tolower(c(unique(schoolData$district),'Esperanza Academy Charter School'
,"Mastery CS - Hardy Williams"
,"HOPE for Hyndman CS"
,"MaST Community CS II"
,"Frederick Douglass Mastery Charter School"
,"Multicultural Academy CS"
,"Preparatory CS of Mathematics, Science, Tech, and Careers"))
| grepl('phila',tolower(as.character(LEA.Name)))) )
View(schoolDataPA)
View(schoolDataPA1)
schoolDataPA1$Display.Value <- #as.numeric(
as.character(schoolDataPA1$Display.Value)
View(schoolDataPA1)
schoolDataPA1$Display.Value <- as.numeric(as.character(schoolDataPA1$Display.Value))
View(schoolDataPA1)
schoolDataPA1$BLAS <- as.numeric(as.character(schoolDataPA1$Display.Value))
schoolDataPA1$pts <- ifelse(schoolDataPA1$BLAS >= 80, 2
,ifelse(schoolDataPA1$BLAS >= 70,1,0))
View(povertyDat)
colnames(schoolDataPA1)
ds <- schoolDataPA1[,c(2,7,8)]
View(ds)
ds$School.Name <- gsub("'","",ds$School.Name)
colnames(ds)
colnames(ds)[1] <- 'name'
ds1 <- left_join(x=schoolData,y=ds,by='name' )
View(ds1)
ds$name <- tolower(ds$name)
schoolData$name <- tolower(schoolData$name)
ds1 <- left_join(x=schoolData,y=ds,by='name' )
View(ds1)
ds$name <- gsub("high school","hs",ds$name)
schoolData$name <- gsub("high school","hs",schoolData$name)
ds1 <- left_join(x=schoolData,y=ds,by='name' )
schoolData$name <- gsub("secondary", "sec", schoolData$name)
ds1 <- left_join(x=schoolData,y=ds,by='name' )
ds$name <- gsub("sch","school",ds$name)
ds$name <- gsub("schoolool", "school", "ds$name")
ds <- schoolDataPA1[,c(2,7,8)]
colnames(ds)[1] <- 'name'
ds$name <- tolower(ds$name)
ds$name <- gsub("high school","hs",ds$name)
ds$name <- gsub("'","",ds$name)
ds$name <- gsub("sch","school",ds$name)
ds$name <- gsub("schoolool", "school", ds$name)
ds1 <- left_join(x=schoolData,y=ds,by='name' )
View(ds1)
write.csv(ds,"scldatPA.csv")
write.csv(schoolData,"gsDat.csv")
library(readr)
gsDat <- read_csv("~/Documents/GitHub/qapScoring-Final/data/gsDat.csv")
View(gsDat)
schoolPoint <- st_as_sf(x = gsDat, coords = c("lon", "lat"), crs = "+proj=longlat +datum=WGS84")
schoolPoint  <- as(schoolPoint, "Spatial")
mapview(schoolPoint)
geojson_write(input=schoolPoint,file="schoolPoints.geojson")
